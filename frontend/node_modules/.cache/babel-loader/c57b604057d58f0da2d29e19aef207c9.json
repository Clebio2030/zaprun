{"ast":null,"code":"import{Box,Chip,TextField}from\"@material-ui/core\";import Autocomplete from\"@material-ui/lab/Autocomplete\";import React,{useEffect,useState}from\"react\";import toastError from\"../../errors/toastError\";import api from\"../../services/api\";export function TagsFilter(_ref){let{onFiltered}=_ref;const[tags,setTags]=useState([]);const[selecteds,setSelecteds]=useState([]);useEffect(()=>{async function fetchData(){await loadTags();}fetchData();},[]);const loadTags=async()=>{try{const{data}=await api.get(\"/tags/list\");setTags(data);}catch(err){toastError(err);}};const onChange=async value=>{setSelecteds(value);onFiltered(value);};return/*#__PURE__*/React.createElement(Box,{style:{padding:10}},/*#__PURE__*/React.createElement(Autocomplete,{multiple:true,size:\"small\",options:tags,value:selecteds,onChange:(e,v,r)=>onChange(v),getOptionLabel:option=>option.name,renderTags:(value,getTagProps)=>value.map((option,index)=>/*#__PURE__*/React.createElement(Chip,Object.assign({variant:\"outlined\",style:{backgroundColor:option.color||\"#eee\",textShadow:\"1px 1px 1px #000\",color:\"white\"},label:option.name},getTagProps({index}),{size:\"small\"}))),renderInput:params=>/*#__PURE__*/React.createElement(TextField,Object.assign({},params,{variant:\"outlined\",placeholder:\"Filtro por Tags\"}))}));}","map":{"version":3,"names":["Box","Chip","TextField","Autocomplete","React","useEffect","useState","toastError","api","TagsFilter","_ref","onFiltered","tags","setTags","selecteds","setSelecteds","fetchData","loadTags","data","get","err","onChange","value","createElement","style","padding","multiple","size","options","e","v","r","getOptionLabel","option","name","renderTags","getTagProps","map","index","Object","assign","variant","backgroundColor","color","textShadow","label","renderInput","params","placeholder"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/components/TagsFilter/index.js"],"sourcesContent":["import { Box, Chip, TextField } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport toastError from \"../../errors/toastError\";\r\nimport api from \"../../services/api\";\r\n\r\nexport function TagsFilter({ onFiltered }) {\r\n  const [tags, setTags] = useState([]);\r\n  const [selecteds, setSelecteds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await loadTags();\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const loadTags = async () => {\r\n    try {\r\n      const { data } = await api.get(`/tags/list`);\r\n      setTags(data);\r\n    } catch (err) {\r\n      toastError(err);\r\n    }\r\n  };\r\n\r\n  const onChange = async (value) => {\r\n    setSelecteds(value);\r\n    onFiltered(value);\r\n  };\r\n\r\n  return (\r\n    <Box style={{ padding: 10 }}>\r\n      <Autocomplete\r\n        multiple\r\n        size=\"small\"\r\n        options={tags}\r\n        value={selecteds}\r\n        onChange={(e, v, r) => onChange(v)}\r\n        getOptionLabel={(option) => option.name}\r\n        renderTags={(value, getTagProps) =>\r\n          value.map((option, index) => (\r\n            <Chip\r\n              variant=\"outlined\"\r\n              style={{\r\n                backgroundColor: option.color || \"#eee\",\r\n                textShadow: \"1px 1px 1px #000\",\r\n                color: \"white\",\r\n              }}\r\n              label={option.name}\r\n              {...getTagProps({ index })}\r\n              size=\"small\"\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            placeholder=\"Filtro por Tags\"\r\n          />\r\n        )}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAASA,GAAG,CAAEC,IAAI,CAAEC,SAAS,KAAQ,mBAAmB,CACxD,MAAO,CAAAC,YAAY,KAAM,+BAA+B,CACxD,MAAO,CAAAC,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,GAAG,KAAM,oBAAoB,CAEpC,MAAO,SAAS,CAAAC,UAAUA,CAAAC,IAAA,CAAiB,IAAhB,CAAEC,UAAW,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACQ,SAAS,CAAEC,YAAY,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE9CD,SAAS,CAAC,IAAM,CACd,cAAe,CAAAW,SAASA,CAAA,CAAG,CACzB,KAAM,CAAAC,QAAQ,CAAC,CAAC,CAClB,CACAD,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI,CACF,KAAM,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAV,GAAG,CAACW,GAAG,aAAa,CAAC,CAC5CN,OAAO,CAACK,IAAI,CAAC,CACf,CAAE,MAAOE,GAAG,CAAE,CACZb,UAAU,CAACa,GAAG,CAAC,CACjB,CACF,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,KAAO,CAAAC,KAAK,EAAK,CAChCP,YAAY,CAACO,KAAK,CAAC,CACnBX,UAAU,CAACW,KAAK,CAAC,CACnB,CAAC,CAED,mBACElB,KAAA,CAAAmB,aAAA,CAACvB,GAAG,EAACwB,KAAK,CAAE,CAAEC,OAAO,CAAE,EAAG,CAAE,eAC1BrB,KAAA,CAAAmB,aAAA,CAACpB,YAAY,EACXuB,QAAQ,MACRC,IAAI,CAAC,OAAO,CACZC,OAAO,CAAEhB,IAAK,CACdU,KAAK,CAAER,SAAU,CACjBO,QAAQ,CAAEA,CAACQ,CAAC,CAAEC,CAAC,CAAEC,CAAC,GAAKV,QAAQ,CAACS,CAAC,CAAE,CACnCE,cAAc,CAAGC,MAAM,EAAKA,MAAM,CAACC,IAAK,CACxCC,UAAU,CAAEA,CAACb,KAAK,CAAEc,WAAW,GAC7Bd,KAAK,CAACe,GAAG,CAAC,CAACJ,MAAM,CAAEK,KAAK,gBACtBlC,KAAA,CAAAmB,aAAA,CAACtB,IAAI,CAAAsC,MAAA,CAAAC,MAAA,EACHC,OAAO,CAAC,UAAU,CAClBjB,KAAK,CAAE,CACLkB,eAAe,CAAET,MAAM,CAACU,KAAK,EAAI,MAAM,CACvCC,UAAU,CAAE,kBAAkB,CAC9BD,KAAK,CAAE,OACT,CAAE,CACFE,KAAK,CAAEZ,MAAM,CAACC,IAAK,EACfE,WAAW,CAAC,CAAEE,KAAM,CAAC,CAAC,EAC1BX,IAAI,CAAC,OAAO,EACb,CACF,CACF,CACDmB,WAAW,CAAGC,MAAM,eAClB3C,KAAA,CAAAmB,aAAA,CAACrB,SAAS,CAAAqC,MAAA,CAAAC,MAAA,IACJO,MAAM,EACVN,OAAO,CAAC,UAAU,CAClBO,WAAW,CAAC,iBAAiB,EAC9B,CACD,CACH,CACE,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module"}