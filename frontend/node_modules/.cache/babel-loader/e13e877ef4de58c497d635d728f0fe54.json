{"ast":null,"code":"class FormatMask{setPhoneFormatMask(phoneToFormat){if(!phoneToFormat||phoneToFormat.length<12){return phoneToFormat;}const number=(\"\"+phoneToFormat).replace(/\\D/g,\"\");if(number.length<=12){const phoneNumberFormatted=number.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);return\"+\"+phoneNumberFormatted[1]+\" (\"+phoneNumberFormatted[2]+\") \"+phoneNumberFormatted[3]+\"-\"+phoneNumberFormatted[4];}else if(number.length===13){const phoneNumberFormatted=number.match(/^(\\d{2})(\\d{2})(\\d{5})(\\d{4})$/);return\"+\"+phoneNumberFormatted[1]+\" (\"+phoneNumberFormatted[2]+\") \"+phoneNumberFormatted[3]+\"-\"+phoneNumberFormatted[4];}else{return phoneToFormat;}return null;}removeMask(number){const filterNumber=number.replace(/\\D/g,\"\");return filterNumber;}maskPhonePattern(phoneNumber){if(phoneNumber.length<13){return'ðŸ‡§ðŸ‡· (99) 9999 9999';}else{return'ðŸ‡§ðŸ‡· (99) 99999 9999';}}}export{FormatMask};","map":{"version":3,"names":["FormatMask","setPhoneFormatMask","phoneToFormat","length","number","replace","phoneNumberFormatted","match","removeMask","filterNumber","maskPhonePattern","phoneNumber"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/utils/FormatMask.js"],"sourcesContent":["class FormatMask {\n  setPhoneFormatMask(phoneToFormat) {\n    if(!phoneToFormat || phoneToFormat.length < 12){\n      return phoneToFormat;\n    }\n\n    const number = (\"\" + phoneToFormat).replace(/\\D/g, \"\");\n\n    if (number.length <= 12) {\n      const phoneNumberFormatted = number.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);\n      return (\n        \"+\" +\n        phoneNumberFormatted[1] +\n        \" (\" +\n        phoneNumberFormatted[2] +\n        \") \" +\n        phoneNumberFormatted[3] +\n        \"-\" +\n        phoneNumberFormatted[4]\n      );\n    }else if(number.length === 13){\n      const phoneNumberFormatted = number.match(/^(\\d{2})(\\d{2})(\\d{5})(\\d{4})$/);\n      return (\n        \"+\" +\n        phoneNumberFormatted[1] +\n        \" (\" +\n        phoneNumberFormatted[2] +\n        \") \" +\n        phoneNumberFormatted[3] +\n        \"-\" +\n        phoneNumberFormatted[4]\n      );\n    } else {\n      return phoneToFormat;\n    }\n\n    return null;\n  }\n\n  removeMask(number) {\n    const filterNumber = number.replace(/\\D/g, \"\");\n    return filterNumber;\n  }\n\n  maskPhonePattern(phoneNumber){\n    if(phoneNumber.length < 13){\n      return 'ðŸ‡§ðŸ‡· (99) 9999 9999';\n    }else{\n      return 'ðŸ‡§ðŸ‡· (99) 99999 9999';\n    }\n  }\n}\n\nexport { FormatMask };"],"mappings":"AAAA,KAAM,CAAAA,UAAW,CACfC,kBAAkBA,CAACC,aAAa,CAAE,CAChC,GAAG,CAACA,aAAa,EAAIA,aAAa,CAACC,MAAM,CAAG,EAAE,CAAC,CAC7C,MAAO,CAAAD,aAAa,CACtB,CAEA,KAAM,CAAAE,MAAM,CAAG,CAAC,EAAE,CAAGF,aAAa,EAAEG,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAEtD,GAAID,MAAM,CAACD,MAAM,EAAI,EAAE,CAAE,CACvB,KAAM,CAAAG,oBAAoB,CAAGF,MAAM,CAACG,KAAK,CAAC,gCAAgC,CAAC,CAC3E,MACE,GAAG,CACHD,oBAAoB,CAAC,CAAC,CAAC,CACvB,IAAI,CACJA,oBAAoB,CAAC,CAAC,CAAC,CACvB,IAAI,CACJA,oBAAoB,CAAC,CAAC,CAAC,CACvB,GAAG,CACHA,oBAAoB,CAAC,CAAC,CAAC,CAE3B,CAAC,IAAK,IAAGF,MAAM,CAACD,MAAM,GAAK,EAAE,CAAC,CAC5B,KAAM,CAAAG,oBAAoB,CAAGF,MAAM,CAACG,KAAK,CAAC,gCAAgC,CAAC,CAC3E,MACE,GAAG,CACHD,oBAAoB,CAAC,CAAC,CAAC,CACvB,IAAI,CACJA,oBAAoB,CAAC,CAAC,CAAC,CACvB,IAAI,CACJA,oBAAoB,CAAC,CAAC,CAAC,CACvB,GAAG,CACHA,oBAAoB,CAAC,CAAC,CAAC,CAE3B,CAAC,IAAM,CACL,MAAO,CAAAJ,aAAa,CACtB,CAEA,MAAO,KAAI,CACb,CAEAM,UAAUA,CAACJ,MAAM,CAAE,CACjB,KAAM,CAAAK,YAAY,CAAGL,MAAM,CAACC,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAC9C,MAAO,CAAAI,YAAY,CACrB,CAEAC,gBAAgBA,CAACC,WAAW,CAAC,CAC3B,GAAGA,WAAW,CAACR,MAAM,CAAG,EAAE,CAAC,CACzB,MAAO,qBAAqB,CAC9B,CAAC,IAAI,CACH,MAAO,sBAAsB,CAC/B,CACF,CACF,CAEA,OAASH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}