{"ast":null,"code":"import{createContext}from\"react\";import openSocket from\"socket.io-client\";// import config from \"../../services/config\";\nconst socketManager={currentSocket:null,GetSocket:function(){const publicToken=localStorage.getItem(\"public-token\");if(publicToken!==this.currentToken){if(this.currentSocket){this.currentSocket.disconnect();}this.currentToken=publicToken;this.currentSocket=openSocket(process.env.REACT_APP_BACKEND_URL,{transports:[\"websocket\"],pingTimeout:18000,pingInterval:18000,query:publicToken?{token:publicToken}:{}// auth: publicToken ? { token: publicToken } : {},\n});}return this.currentSocket;},onConnect:function(callbackConnect){if(this.currentSocket&&this.currentSocket.connected){callbackConnect();}this.currentSocket.on(\"connect\",callbackConnect);}};const SocketContext=createContext();export{SocketContext,socketManager};","map":{"version":3,"names":["createContext","openSocket","socketManager","currentSocket","GetSocket","publicToken","localStorage","getItem","currentToken","disconnect","process","env","REACT_APP_BACKEND_URL","transports","pingTimeout","pingInterval","query","token","onConnect","callbackConnect","connected","on","SocketContext"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/context/Socket/SocketContext.js"],"sourcesContent":["import { createContext } from \"react\";\r\nimport openSocket from \"socket.io-client\";\r\n// import config from \"../../services/config\";\r\n\r\nconst socketManager = {\r\n\tcurrentSocket: null,\r\n\r\n\tGetSocket: function () {\r\n\t\tconst publicToken = localStorage.getItem(\"public-token\");\r\n\r\n\t\tif (publicToken !== this.currentToken) {\r\n\t\t\tif (this.currentSocket) {\r\n\t\t\t\tthis.currentSocket.disconnect();\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentToken = publicToken;\r\n\t\t\tthis.currentSocket = openSocket(process.env.REACT_APP_BACKEND_URL, {\r\n\t\t\t\ttransports: [\"websocket\"],\r\n\t\t\t\tpingTimeout: 18000,\r\n\t\t\t\tpingInterval: 18000,\r\n\t\t\t\tquery: publicToken ? { token: publicToken } : {},\r\n\t\t\t\t// auth: publicToken ? { token: publicToken } : {},\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.currentSocket;\r\n\t},\r\n\r\n\tonConnect: function (callbackConnect) {\r\n\t\tif (this.currentSocket && this.currentSocket.connected) {\r\n\t\t\tcallbackConnect();\r\n\t\t}\r\n\t\tthis.currentSocket.on(\"connect\", callbackConnect);\r\n\t},\r\n};\r\n\r\nconst SocketContext = createContext()\r\n\r\nexport { SocketContext, socketManager };\r\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,OAAO,CACrC,MAAO,CAAAC,UAAU,KAAM,kBAAkB,CACzC;AAEA,KAAM,CAAAC,aAAa,CAAG,CACrBC,aAAa,CAAE,IAAI,CAEnBC,SAAS,CAAE,QAAAA,CAAA,CAAY,CACtB,KAAM,CAAAC,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAExD,GAAIF,WAAW,GAAK,IAAI,CAACG,YAAY,CAAE,CACtC,GAAI,IAAI,CAACL,aAAa,CAAE,CACvB,IAAI,CAACA,aAAa,CAACM,UAAU,CAAC,CAAC,CAChC,CAEA,IAAI,CAACD,YAAY,CAAGH,WAAW,CAC/B,IAAI,CAACF,aAAa,CAAGF,UAAU,CAACS,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAE,CAClEC,UAAU,CAAE,CAAC,WAAW,CAAC,CACzBC,WAAW,CAAE,KAAK,CAClBC,YAAY,CAAE,KAAK,CACnBC,KAAK,CAAEX,WAAW,CAAG,CAAEY,KAAK,CAAEZ,WAAY,CAAC,CAAG,CAAC,CAC/C;AACD,CAAC,CAAC,CACH,CACA,MAAO,KAAI,CAACF,aAAa,CAC1B,CAAC,CAEDe,SAAS,CAAE,QAAAA,CAAUC,eAAe,CAAE,CACrC,GAAI,IAAI,CAAChB,aAAa,EAAI,IAAI,CAACA,aAAa,CAACiB,SAAS,CAAE,CACvDD,eAAe,CAAC,CAAC,CAClB,CACA,IAAI,CAAChB,aAAa,CAACkB,EAAE,CAAC,SAAS,CAAEF,eAAe,CAAC,CAClD,CACD,CAAC,CAED,KAAM,CAAAG,aAAa,CAAGtB,aAAa,CAAC,CAAC,CAErC,OAASsB,aAAa,CAAEpB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}