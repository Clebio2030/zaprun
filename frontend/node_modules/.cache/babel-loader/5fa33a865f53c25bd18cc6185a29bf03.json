{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import{useDropzone}from\"react-dropzone\";import makeStyles from\"@material-ui/core/styles/makeStyles\";import{read,utils}from\"xlsx\";import{Button,FormControlLabel,FormGroup,MenuItem,Select,Switch,Table,TableBody,TableCell,TableContainer,TableHead,TableRow}from\"@material-ui/core\";import api from\"../../services/api\";import upload from\"../../assets/upload.gif\";import{useHistory}from\"react-router-dom\";import toastError from\"../../errors/toastError\";import useWindowDimensions from\"../../hooks/useWindowDimensions\";import{toast}from\"react-toastify\";function WorksheetToDatagrid(ws){/* create an array of arrays */const rows=utils.sheet_to_json(ws,{header:1,defval:\"\"});/* create column array */const range=utils.decode_range(ws[\"!ref\"]||\"A1\");const columns=Array.from({length:range.e.c+1},(_,i)=>({key:String(i),// RDG will access row[\"0\"], row[\"1\"], etc\nname:utils.encode_col(i)// the column labels will be A, B, etc\n//editor: textEditor // enable cell editing\n}));return{rows,columns};// these can be fed to setRows / setColumns\n}const useStyles=makeStyles(theme=>({xlsTable:{width:\"100%\"},tableContainer:{flex:1,padding:1,overflowX:\"auto\",overflowY:\"scroll\",...theme.scrollbarStyles},actions:{padding:2,border:\"1px solid #CCC\",boxShadow:\"1px 1px 5px #CCC\",marginTop:2,display:\"flex\",justifyContent:\"center\"},importOptions:{padding:2,border:\"1px solid #CCC\",boxShadow:\"1px 1px 5px #CCC\",marginTop:2,marginBottom:2},error:{color:\"red\",marginTop:1},buttonImport:{marginRight:1},select:{minWidth:200},backButtonContainer:{textAlign:\"center\",marginTop:20}}));const ContactImport=()=>{const size=useWindowDimensions();const[rows,setRows]=useState(null);const[columns,setColumns]=useState(null);const classes=useStyles();const history=useHistory();const[contactFieldsAvailable,setContactFieldsAvailable]=useState([]);const[columnValue,setColumnValue]=useState({});const[selectedFields,setSelectedFields]=useState({});// Para rastrear seleções únicas\nconst[openingFile,setOpeningFile]=useState(false);const[selection,setSelection]=useState({});const[invalidFile,setInvalidFile]=useState(false);const[error,setError]=useState(null);const[countCreated,setCountCreated]=useState(0);const[countIgnored,setCountIgnored]=useState(0);const[uploading,setUploading]=useState(false);const[imported,setImported]=useState(false);const[selectedRows,setSelectedRows]=useState({});const[validateContact,setValidateContact]=useState(false);const contactFields=[{id:\"name\",label:\"Nome\",required:true},{id:\"number\",label:\"Número\",required:true},{id:\"email\",label:\"E-mail\",required:false},{id:\"tags\",label:\"Tags\",required:false}];useEffect(()=>{setContactFieldsAvailable(contactFields);},[]);const processImport=async()=>{setUploading(true);console.log(selection);if(!selection.number){toastError(\"Não foi selecionado o campo de número do contato\");setUploading(false);return;}if(!selection.name){toastError(\"Não foi selecionado o campo de nome do contato\");setUploading(false);return;}if(Object.keys(selectedRows).length===0){toastError(\"Nenhum contato selecionado\");setUploading(false);return;}if((rows===null||rows===void 0?void 0:rows.length)>1){for(let index=1;index<rows.length;index++){if(selectedRows[index]){// Importar apenas as linhas selecionadas\nconst item=rows[index];const contactData={};for(let columnIndex=0;columnIndex<columns.length;columnIndex++){const column=columns[columnIndex];const selectedField=columnValue[column.key];if(selectedField){contactData[selectedField]=item[columnIndex];}}// Verificar se os campos obrigatórios estão presentes\nconst missingRequiredFields=contactFields.some(field=>field.required&&!contactData[field.id]);if(missingRequiredFields){setCountIgnored(prevCount=>prevCount+1);continue;}try{const data=await api.post('/contactsImport',{...contactData,validateContact:validateContact?\"true\":\"false\"});if(data.status===200){setCountCreated(prevCount=>prevCount+1);}else{setCountIgnored(prevCount=>prevCount+1);}}catch(error){setCountIgnored(prevCount=>prevCount+1);}}}setValidateContact(false);setSelectedRows({});setImported(true);setUploading(false);if(countIgnored===0){toast.success(\"Importação realizada com sucesso\");}else{toast.alert(\"Importação realizada com sucesso, mas houveram alguns erros\");}}};const onChangeFile=acceptedFiles=>{if(acceptedFiles.length===0)return;setOpeningFile(true);setInvalidFile(false);setImported(false);setUploading(false);const file=acceptedFiles[0];const reader=new FileReader();reader.onload=function(e){try{const data=e.target.result;const wb=read(data);const ws=wb.Sheets[wb.SheetNames[0]];const{rows,columns}=WorksheetToDatagrid(ws);setRows(rows);setColumns(columns);setOpeningFile(false);}catch(e){console.error(e);setInvalidFile(true);setOpeningFile(false);}};reader.readAsArrayBuffer(file);};const handleSelectChange=event=>{const newValue=event.target.value;const columnKey=event.target.name;// Remover antiga seleção\nif(columnValue[columnKey]){const oldValue=columnValue[columnKey];setSelectedFields(prevSelectedFields=>{const newSelectedFields={...prevSelectedFields};delete newSelectedFields[oldValue];return newSelectedFields;});}// Se o novo valor for vazio, limpar a seleção\nif(newValue===\"\"){setColumnValue(prevColumnValue=>{const newColumnValue={...prevColumnValue};delete newColumnValue[columnKey];return newColumnValue;});setSelection(prevSelection=>{const newSelection={...prevSelection};Object.keys(newSelection).forEach(key=>{if(newSelection[key]===columnKey){delete newSelection[key];}});return newSelection;});return;}// Verificar se o novo valor já foi selecionado\nif(selectedFields[newValue]){toastError(\"O campo \".concat(newValue,\" j\\xE1 foi selecionado.\"));return;}// Atualizar seleção\nsetSelection(selection=>({...selection,[newValue]:columnKey}));setSelectedFields(prevSelectedFields=>({...prevSelectedFields,[newValue]:columnKey}));setColumnValue(columnValue=>({...columnValue,[columnKey]:newValue}));};const renderSelectbox=column=>{return/*#__PURE__*/React.createElement(Select,{value:columnValue[column.key],name:column.key,onChange:handleSelectChange},/*#__PURE__*/React.createElement(MenuItem,{value:\"\"},\"\\xA0\"),contactFieldsAvailable.map(contactField=>/*#__PURE__*/React.createElement(MenuItem,{value:contactField.id},contactField.label)));};const renderXls=()=>{return/*#__PURE__*/React.createElement(TableContainer,{className:classes.tableContainer,style:{height:size.height*0.75}},/*#__PURE__*/React.createElement(Table,{stickyHeader:true},/*#__PURE__*/React.createElement(TableHead,{key:columns.length},/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:Object.keys(selectedRows).length===rows.length-1// Se todas as linhas, exceto a primeira, estiverem marcadas\n,onChange:event=>{const isChecked=event.target.checked;const newSelectedRows={};if(isChecked){// Marcar todas as linhas, exceto a primeira\nfor(let i=1;i<rows.length;i++){newSelectedRows[i]=true;}}setSelectedRows(newSelectedRows);}})),columns.map(column=>/*#__PURE__*/React.createElement(TableCell,{key:column.key},column.name))),/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,null),columns.map(column=>/*#__PURE__*/React.createElement(TableCell,{key:column.key},renderSelectbox(column))))),/*#__PURE__*/React.createElement(TableBody,null,rows.map((row,rowIndex)=>/*#__PURE__*/React.createElement(TableRow,{key:rowIndex},rowIndex!==0&&/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",checked:!!selectedRows[rowIndex],onChange:()=>{setSelectedRows(prevSelectedRows=>({...prevSelectedRows,[rowIndex]:!prevSelectedRows[rowIndex]}));}})),rowIndex!==0&&row.map((column,columnIndex)=>/*#__PURE__*/React.createElement(TableCell,{key:columnIndex},column)))))));};const handleCloseImport=async()=>{try{history.push(\"/contacts\");}catch(err){toastError(err);}};const renderContent=()=>{return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:classes.importOptions},/*#__PURE__*/React.createElement(FormGroup,{row:true,style:{width:'100%',display:'flex',justifyContent:'space-around'}},/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Switch,{checked:validateContact,onChange:event=>setValidateContact(event.target.checked),color:\"primary\"}),label:\"Validar contatos no WhatsApp\"}))),renderXls(),/*#__PURE__*/React.createElement(\"div\",{className:classes.actions},uploading&&/*#__PURE__*/React.createElement(\"div\",null,\"Importando... Aguarde\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",disabled:uploading,className:classes.buttonImport,onClick:()=>processImport()},\"Importar contatos\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",disabled:uploading,onClick:()=>{setRows(null);setColumns(null);}},\"Cancelar\"),error&&/*#__PURE__*/React.createElement(\"div\",{className:classes.error},error)));};const{getRootProps,getInputProps}=useDropzone({onDrop:onChangeFile,maxFiles:1});return/*#__PURE__*/React.createElement(\"div\",{style:{alignContent:\"center\"}},imported&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,countCreated,\" contatos criados\"),/*#__PURE__*/React.createElement(\"li\",null,countIgnored,\" contatos ignorados (n\\xFAmero inv\\xE1lido ou n\\xE3o marcados para atualizar)\"))),openingFile&&/*#__PURE__*/React.createElement(\"div\",null,\"Processando arquivo...\"),invalidFile&&/*#__PURE__*/React.createElement(\"div\",null,\"Arquivo inv\\xE1lido!\"),!imported&&rows&&columns?renderContent():/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",Object.assign({},getRootProps(),{className:\"uploaderDrop\",style:{borderRadius:20,maxWidth:500,margin:\"20px auto\",border:\"3px dotted #ddd\",padding:20,display:\"flex\",justifyContent:\"center\",alignItems:\"center\",flexDirection:\"column\"}}),/*#__PURE__*/React.createElement(\"img\",{src:upload,height:200,alt:\"Upload\"}),/*#__PURE__*/React.createElement(\"h5\",null,\"Clique ou arraste um arquivo\"),/*#__PURE__*/React.createElement(\"p\",{style:{color:\"#e74c3c\",fontWeight:\"bold\",textAlign:\"center\"}},\"* Importante: Arquivos somente com extens\\xF5es s\\xE3o aceitas: xls, xslx, csv, txt\")),/*#__PURE__*/React.createElement(\"input\",getInputProps()),/*#__PURE__*/React.createElement(\"div\",{className:classes.backButtonContainer},/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",disabled:uploading,onClick:handleCloseImport},\"Voltar\"))));};export default ContactImport;","map":{"version":3,"names":["React","useEffect","useRef","useState","useDropzone","makeStyles","read","utils","Button","FormControlLabel","FormGroup","MenuItem","Select","Switch","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","api","upload","useHistory","toastError","useWindowDimensions","toast","WorksheetToDatagrid","ws","rows","sheet_to_json","header","defval","range","decode_range","columns","Array","from","length","e","c","_","i","key","String","name","encode_col","useStyles","theme","xlsTable","width","tableContainer","flex","padding","overflowX","overflowY","scrollbarStyles","actions","border","boxShadow","marginTop","display","justifyContent","importOptions","marginBottom","error","color","buttonImport","marginRight","select","minWidth","backButtonContainer","textAlign","ContactImport","size","setRows","setColumns","classes","history","contactFieldsAvailable","setContactFieldsAvailable","columnValue","setColumnValue","selectedFields","setSelectedFields","openingFile","setOpeningFile","selection","setSelection","invalidFile","setInvalidFile","setError","countCreated","setCountCreated","countIgnored","setCountIgnored","uploading","setUploading","imported","setImported","selectedRows","setSelectedRows","validateContact","setValidateContact","contactFields","id","label","required","processImport","console","log","number","Object","keys","index","item","contactData","columnIndex","column","selectedField","missingRequiredFields","some","field","prevCount","data","post","status","success","alert","onChangeFile","acceptedFiles","file","reader","FileReader","onload","target","result","wb","Sheets","SheetNames","readAsArrayBuffer","handleSelectChange","event","newValue","value","columnKey","oldValue","prevSelectedFields","newSelectedFields","prevColumnValue","newColumnValue","prevSelection","newSelection","forEach","concat","renderSelectbox","createElement","onChange","map","contactField","renderXls","className","style","height","stickyHeader","type","checked","isChecked","newSelectedRows","row","rowIndex","prevSelectedRows","handleCloseImport","push","err","renderContent","control","variant","disabled","onClick","getRootProps","getInputProps","onDrop","maxFiles","alignContent","Fragment","assign","borderRadius","maxWidth","margin","alignItems","flexDirection","src","alt","fontWeight"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/components/ContactImport/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { read, utils } from \"xlsx\";\nimport {\n  Button,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Select,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport api from \"../../services/api\";\nimport upload from \"../../assets/upload.gif\";\nimport { useHistory } from \"react-router-dom\";\nimport toastError from \"../../errors/toastError\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\nimport { toast } from \"react-toastify\";\n\nfunction WorksheetToDatagrid(ws) {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, { header: 1, defval: \"\" });\n\n  /* create column array */\n  const range = utils.decode_range(ws[\"!ref\"] || \"A1\");\n  const columns = Array.from({ length: range.e.c + 1 }, (_, i) => ({\n    key: String(i), // RDG will access row[\"0\"], row[\"1\"], etc\n    name: utils.encode_col(i), // the column labels will be A, B, etc\n    //editor: textEditor // enable cell editing\n  }));\n\n  return { rows, columns }; // these can be fed to setRows / setColumns\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  xlsTable: {\n    width: \"100%\",\n  },\n  tableContainer: {\n    flex: 1,\n    padding: 1,\n    overflowX: \"auto\",\n    overflowY: \"scroll\",\n    ...theme.scrollbarStyles,\n  },\n  actions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  importOptions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    marginBottom: 2,\n  },\n  error: {\n    color: \"red\",\n    marginTop: 1,\n  },\n  buttonImport: {\n    marginRight: 1,\n  },\n  select: {\n    minWidth: 200,\n  },\n  backButtonContainer: {\n    textAlign: \"center\",\n    marginTop: 20,\n  },\n}));\n\nconst ContactImport = () => {\n  const size = useWindowDimensions();\n\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const classes = useStyles();\n  const history = useHistory();\n  const [contactFieldsAvailable, setContactFieldsAvailable] = useState([]);\n  const [columnValue, setColumnValue] = useState({});\n  const [selectedFields, setSelectedFields] = useState({}); // Para rastrear seleções únicas\n\n  const [openingFile, setOpeningFile] = useState(false);\n  const [selection, setSelection] = useState({});\n  const [invalidFile, setInvalidFile] = useState(false);\n  const [error, setError] = useState(null);\n  const [countCreated, setCountCreated] = useState(0);\n  const [countIgnored, setCountIgnored] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [imported, setImported] = useState(false);\n  const [selectedRows, setSelectedRows] = useState({});\n  const [validateContact, setValidateContact] = useState(false);\n  const contactFields = [\n    { id: \"name\", label: \"Nome\", required: true },\n    { id: \"number\", label: \"Número\", required: true },\n    { id: \"email\", label: \"E-mail\", required: false },\n    { id: \"tags\", label: \"Tags\", required: false },\n  ];\n\n  useEffect(() => {\n    setContactFieldsAvailable(contactFields);\n  }, []);\n\n  const processImport = async () => {\n    setUploading(true);\n\n    console.log(selection)\n\n    if (!selection.number) {\n      toastError(\"Não foi selecionado o campo de número do contato\");\n      setUploading(false);\n      return;\n    }\n\n    if (!selection.name) {\n      toastError(\"Não foi selecionado o campo de nome do contato\");\n      setUploading(false);\n      return;\n    }\n\n    if (Object.keys(selectedRows).length === 0) {\n      toastError(\"Nenhum contato selecionado\");\n      setUploading(false);\n      return;\n    }\n\n    if (rows?.length > 1) {\n      for (let index = 1; index < rows.length; index++) {\n        if (selectedRows[index]) { // Importar apenas as linhas selecionadas\n          const item = rows[index];\n          const contactData = {};\n\n          for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n            const column = columns[columnIndex];\n            const selectedField = columnValue[column.key];\n\n            if (selectedField) {\n              contactData[selectedField] = item[columnIndex];\n            }\n          }\n          // Verificar se os campos obrigatórios estão presentes\n          const missingRequiredFields = contactFields.some(field => field.required && !contactData[field.id]);\n\n          if (missingRequiredFields) {\n            setCountIgnored(prevCount => prevCount + 1);\n            continue;\n          }\n\n          try {\n            const data = await api.post('/contactsImport', {\n              ...contactData,\n              validateContact: validateContact ? \"true\" : \"false\",\n            });\n\n            if (data.status === 200) {\n              setCountCreated(prevCount => prevCount + 1);\n            } else {\n              setCountIgnored(prevCount => prevCount + 1);\n            }\n          } catch (error) {\n            setCountIgnored(prevCount => prevCount + 1);\n          }\n        }\n      }\n      setValidateContact(false);\n      setSelectedRows({});\n      setImported(true);\n      setUploading(false);\n      \n      if (countIgnored === 0) {\n        toast.success(\"Importação realizada com sucesso\");\n      } else {\n        toast.alert(\"Importação realizada com sucesso, mas houveram alguns erros\");\n      }\n    }\n  };\n\n  const onChangeFile = (acceptedFiles) => {\n    if (acceptedFiles.length === 0) return;\n    setOpeningFile(true);\n    setInvalidFile(false);\n    setImported(false);\n    setUploading(false);\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      try {\n        const data = e.target.result;\n        const wb = read(data);\n        const ws = wb.Sheets[wb.SheetNames[0]];\n        const { rows, columns } = WorksheetToDatagrid(ws);\n        setRows(rows);\n        setColumns(columns);\n        setOpeningFile(false);\n      } catch (e) {\n        console.error(e);\n        setInvalidFile(true);\n        setOpeningFile(false);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleSelectChange = (event) => {\n    const newValue = event.target.value;\n    const columnKey = event.target.name;\n  \n    // Remover antiga seleção\n    if (columnValue[columnKey]) {\n      const oldValue = columnValue[columnKey];\n      setSelectedFields((prevSelectedFields) => {\n        const newSelectedFields = { ...prevSelectedFields };\n        delete newSelectedFields[oldValue];\n        return newSelectedFields;\n      });\n    }\n  \n    // Se o novo valor for vazio, limpar a seleção\n    if (newValue === \"\") {\n      setColumnValue((prevColumnValue) => {\n        const newColumnValue = { ...prevColumnValue };\n        delete newColumnValue[columnKey];\n        return newColumnValue;\n      });\n      setSelection((prevSelection) => {\n        const newSelection = { ...prevSelection };\n        Object.keys(newSelection).forEach((key) => {\n          if (newSelection[key] === columnKey) {\n            delete newSelection[key];\n          }\n        });\n        return newSelection;\n      });\n      return;\n    }\n  \n    // Verificar se o novo valor já foi selecionado\n    if (selectedFields[newValue]) {\n      toastError(`O campo ${newValue} já foi selecionado.`);\n      return;\n    }\n  \n    // Atualizar seleção\n    setSelection((selection) => ({ ...selection, [newValue]: columnKey }));\n    setSelectedFields((prevSelectedFields) => ({ ...prevSelectedFields, [newValue]: columnKey }));\n    setColumnValue((columnValue) => ({ ...columnValue, [columnKey]: newValue }));\n  };\n  \n\n  const renderSelectbox = (column) => {\n    return (\n      <Select value={columnValue[column.key]} name={column.key} onChange={handleSelectChange}>\n        <MenuItem value=\"\">&nbsp;</MenuItem>\n        {contactFieldsAvailable.map((contactField) => (\n          <MenuItem value={contactField.id}>{contactField.label}</MenuItem>\n        ))}\n      </Select>\n    );\n  };\n\n  const renderXls = () => {\n    return (\n      <TableContainer className={classes.tableContainer} style={{ height: size.height * 0.75 }}>\n        <Table stickyHeader>\n          <TableHead key={columns.length}>\n            <TableRow>\n              <TableCell>\n                <input\n                  type=\"checkbox\"\n                  checked={Object.keys(selectedRows).length === rows.length - 1} // Se todas as linhas, exceto a primeira, estiverem marcadas\n                  onChange={(event) => {\n                    const isChecked = event.target.checked;\n                    const newSelectedRows = {};\n                    if (isChecked) {\n                      // Marcar todas as linhas, exceto a primeira\n                      for (let i = 1; i < rows.length; i++) {\n                        newSelectedRows[i] = true;\n                      }\n                    }\n                    setSelectedRows(newSelectedRows);\n                  }}\n                />\n              </TableCell>\n              {columns.map((column) => (\n                <TableCell key={column.key}>{column.name}</TableCell>\n              ))}\n            </TableRow>\n            <TableRow>\n              <TableCell></TableCell>\n              {columns.map((column) => (\n                <TableCell key={column.key}>{renderSelectbox(column)}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rowIndex) => (\n              <TableRow key={rowIndex}>\n                {rowIndex !== 0 && (\n                  <TableCell>\n                    <input\n                      type=\"checkbox\"\n                      checked={!!selectedRows[rowIndex]}\n                      onChange={() => {\n                        setSelectedRows((prevSelectedRows) => ({\n                          ...prevSelectedRows,\n                          [rowIndex]: !prevSelectedRows[rowIndex],\n                        }));\n                      }}\n                    />\n                  </TableCell>\n                )}\n                {rowIndex !== 0 && (\n                  row.map((column, columnIndex) => (\n                    <TableCell key={columnIndex}>{column}</TableCell>\n                  ))\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n\n  const handleCloseImport = async () => {\n    try {\n      history.push(\"/contacts\");\n    } catch (err) {\n      toastError(err);\n    }\n  };\n\n  const renderContent = () => {\n    return (\n      <div>\n        <div className={classes.importOptions}>\n          <FormGroup row style={{ width: '100%', display: 'flex', justifyContent: 'space-around' }}>\n            <FormControlLabel\n              control={\n                <Switch checked={validateContact} onChange={(event) => setValidateContact(event.target.checked)} color=\"primary\" />\n              }\n              label=\"Validar contatos no WhatsApp\"\n            />\n          </FormGroup>\n        </div>\n        {renderXls()}\n        <div className={classes.actions}>\n          {uploading && <div>Importando... Aguarde</div>}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={uploading}\n            className={classes.buttonImport}\n            onClick={() => processImport()}\n          >\n            Importar contatos\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={uploading}\n            onClick={() => {\n              setRows(null);\n              setColumns(null);\n            }}\n          >\n            Cancelar\n          </Button>\n          {error && <div className={classes.error}>{error}</div>}\n        </div>\n      </div>\n    );\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: onChangeFile,\n    maxFiles: 1,\n  });\n\n  return (\n    <div style={{ alignContent: \"center\" }}>\n      {imported && (\n        <div>\n          <ul>\n            <li>{countCreated} contatos criados</li>\n            <li>{countIgnored} contatos ignorados (número inválido ou não marcados para atualizar)</li>\n          </ul>\n        </div>\n      )}\n      {openingFile && <div>Processando arquivo...</div>}\n      {invalidFile && <div>Arquivo inválido!</div>}\n      {!imported && rows && columns ? renderContent() : (\n        <>\n          <div\n            {...getRootProps()}\n            className=\"uploaderDrop\"\n            style={{\n              borderRadius: 20,\n              maxWidth: 500,\n              margin: \"20px auto\",\n              border: \"3px dotted #ddd\",\n              padding: 20,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <img src={upload} height={200} alt=\"Upload\" />\n            <h5>Clique ou arraste um arquivo</h5>\n            <p style={{ color: \"#e74c3c\", fontWeight: \"bold\", textAlign: \"center\" }}>\n              * Importante: Arquivos somente com extensões são aceitas: xls, xslx, csv, txt\n            </p>\n          </div>\n\n          <input {...getInputProps()} />\n\n          <div className={classes.backButtonContainer}>\n            <Button variant=\"contained\" color=\"secondary\" disabled={uploading} onClick={handleCloseImport}>\n              Voltar\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ContactImport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}