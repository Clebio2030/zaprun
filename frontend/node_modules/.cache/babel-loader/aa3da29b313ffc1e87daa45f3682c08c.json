{"ast":null,"code":"import io from\"socket.io-client\";class SocketWorker{constructor(companyId,userId){if(!SocketWorker.instance){this.companyId=companyId;this.userId=userId;this.socket=null;this.configureSocket();this.eventListeners={};// Armazena os ouvintes de eventos registrados\nSocketWorker.instance=this;}return SocketWorker.instance;}configureSocket(){this.socket=io(\"\".concat(process.env.REACT_APP_BACKEND_URL,\"/\").concat(this===null||this===void 0?void 0:this.companyId),{autoConnect:true,reconnection:true,reconnectionDelay:1000,reconnectionAttempts:Infinity,query:{userId:this.userId}});this.socket.on(\"connect\",()=>{});this.socket.on(\"disconnect\",()=>{this.reconnectAfterDelay();});}// Adiciona um ouvinte de eventos\non(event,callback){this.connect();this.socket.on(event,callback);// Armazena o ouvinte no objeto de ouvintes\nif(!this.eventListeners[event]){this.eventListeners[event]=[];}this.eventListeners[event].push(callback);}// Emite um evento\nemit(event,data){this.connect();this.socket.emit(event,data);}// Desconecta um ou mais ouvintes de eventos\noff(event,callback){this.connect();if(this.eventListeners[event]){if(callback){// Desconecta um ouvinte específico\nthis.socket.off(event,callback);this.eventListeners[event]=this.eventListeners[event].filter(cb=>cb!==callback);}else{// Desconecta todos os ouvintes do evento\nthis.eventListeners[event].forEach(cb=>this.socket.off(event,cb));delete this.eventListeners[event];}}}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;this.instance=null;}}reconnectAfterDelay(){setTimeout(()=>{if(!this.socket||!this.socket.connected){this.connect();}},1000);}// Garante que o socket esteja conectado\nconnect(){if(!this.socket){this.configureSocket();}}forceReconnect(){}}// const instance = (companyId, userId) => new SocketWorker(companyId,userId);\nconst instance=(companyId,userId)=>new SocketWorker(companyId,userId);export default instance;","map":{"version":3,"names":["io","SocketWorker","constructor","companyId","userId","instance","socket","configureSocket","eventListeners","concat","process","env","REACT_APP_BACKEND_URL","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","query","on","reconnectAfterDelay","event","callback","connect","push","emit","data","off","filter","cb","forEach","disconnect","setTimeout","connected","forceReconnect"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/services/SocketWorker.js"],"sourcesContent":["import io from \"socket.io-client\";\n\nclass SocketWorker {\n  constructor(companyId , userId) {\n    if (!SocketWorker.instance) {\n      this.companyId = companyId\n      this.userId = userId\n      this.socket = null;\n      this.configureSocket();\n      this.eventListeners = {}; // Armazena os ouvintes de eventos registrados\n      SocketWorker.instance = this;\n\n    } \n\n    return SocketWorker.instance;\n  }\n\n  configureSocket() {\n    this.socket = io(`${process.env.REACT_APP_BACKEND_URL}/${this?.companyId}` , {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: Infinity,\n      query: { userId: this.userId }\n    });\n\n    this.socket.on(\"connect\", () => {\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.reconnectAfterDelay();\n    });\n  }\n\n  // Adiciona um ouvinte de eventos\n  on(event, callback) {\n    this.connect();\n    this.socket.on(event, callback);\n\n    // Armazena o ouvinte no objeto de ouvintes\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n  }\n\n  // Emite um evento\n  emit(event, data) {\n    this.connect();\n    this.socket.emit(event, data);\n  }\n\n  // Desconecta um ou mais ouvintes de eventos\n  off(event, callback) {\n    this.connect();\n    if (this.eventListeners[event]) {\n      if (callback) {\n        // Desconecta um ouvinte específico\n        this.socket.off(event, callback);\n        this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n      } else {\n\n        // Desconecta todos os ouvintes do evento\n        this.eventListeners[event].forEach(cb => this.socket.off(event, cb));\n        delete this.eventListeners[event];\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null\n      this.instance = null\n    }\n  }\n\n  reconnectAfterDelay() {\n    setTimeout(() => {\n      if (!this.socket || !this.socket.connected) {\n        this.connect();\n      }\n    }, 1000);\n  }\n\n  // Garante que o socket esteja conectado\n  connect() {\n    if (!this.socket) {\n      this.configureSocket();\n    }\n  }\n\n  forceReconnect() {\n\n  }\n}\n\n// const instance = (companyId, userId) => new SocketWorker(companyId,userId);\nconst instance = (companyId, userId) => new SocketWorker(companyId, userId);\n\nexport default instance;"],"mappings":"AAAA,MAAO,CAAAA,EAAE,KAAM,kBAAkB,CAEjC,KAAM,CAAAC,YAAa,CACjBC,WAAWA,CAACC,SAAS,CAAGC,MAAM,CAAE,CAC9B,GAAI,CAACH,YAAY,CAACI,QAAQ,CAAE,CAC1B,IAAI,CAACF,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAACC,MAAM,CAAGA,MAAM,CACpB,IAAI,CAACE,MAAM,CAAG,IAAI,CAClB,IAAI,CAACC,eAAe,CAAC,CAAC,CACtB,IAAI,CAACC,cAAc,CAAG,CAAC,CAAC,CAAE;AAC1BP,YAAY,CAACI,QAAQ,CAAG,IAAI,CAE9B,CAEA,MAAO,CAAAJ,YAAY,CAACI,QAAQ,CAC9B,CAEAE,eAAeA,CAAA,CAAG,CAChB,IAAI,CAACD,MAAM,CAAGN,EAAE,IAAAS,MAAA,CAAIC,OAAO,CAACC,GAAG,CAACC,qBAAqB,MAAAH,MAAA,CAAI,IAAI,SAAJ,IAAI,iBAAJ,IAAI,CAAEN,SAAS,EAAK,CAC3EU,WAAW,CAAE,IAAI,CACjBC,YAAY,CAAE,IAAI,CAClBC,iBAAiB,CAAE,IAAI,CACvBC,oBAAoB,CAAEC,QAAQ,CAC9BC,KAAK,CAAE,CAAEd,MAAM,CAAE,IAAI,CAACA,MAAO,CAC/B,CAAC,CAAC,CAEF,IAAI,CAACE,MAAM,CAACa,EAAE,CAAC,SAAS,CAAE,IAAM,CAChC,CAAC,CAAC,CAEF,IAAI,CAACb,MAAM,CAACa,EAAE,CAAC,YAAY,CAAE,IAAM,CACjC,IAAI,CAACC,mBAAmB,CAAC,CAAC,CAC5B,CAAC,CAAC,CACJ,CAEA;AACAD,EAAEA,CAACE,KAAK,CAAEC,QAAQ,CAAE,CAClB,IAAI,CAACC,OAAO,CAAC,CAAC,CACd,IAAI,CAACjB,MAAM,CAACa,EAAE,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAE/B;AACA,GAAI,CAAC,IAAI,CAACd,cAAc,CAACa,KAAK,CAAC,CAAE,CAC/B,IAAI,CAACb,cAAc,CAACa,KAAK,CAAC,CAAG,EAAE,CACjC,CACA,IAAI,CAACb,cAAc,CAACa,KAAK,CAAC,CAACG,IAAI,CAACF,QAAQ,CAAC,CAC3C,CAEA;AACAG,IAAIA,CAACJ,KAAK,CAAEK,IAAI,CAAE,CAChB,IAAI,CAACH,OAAO,CAAC,CAAC,CACd,IAAI,CAACjB,MAAM,CAACmB,IAAI,CAACJ,KAAK,CAAEK,IAAI,CAAC,CAC/B,CAEA;AACAC,GAAGA,CAACN,KAAK,CAAEC,QAAQ,CAAE,CACnB,IAAI,CAACC,OAAO,CAAC,CAAC,CACd,GAAI,IAAI,CAACf,cAAc,CAACa,KAAK,CAAC,CAAE,CAC9B,GAAIC,QAAQ,CAAE,CACZ;AACA,IAAI,CAAChB,MAAM,CAACqB,GAAG,CAACN,KAAK,CAAEC,QAAQ,CAAC,CAChC,IAAI,CAACd,cAAc,CAACa,KAAK,CAAC,CAAG,IAAI,CAACb,cAAc,CAACa,KAAK,CAAC,CAACO,MAAM,CAACC,EAAE,EAAIA,EAAE,GAAKP,QAAQ,CAAC,CACvF,CAAC,IAAM,CAEL;AACA,IAAI,CAACd,cAAc,CAACa,KAAK,CAAC,CAACS,OAAO,CAACD,EAAE,EAAI,IAAI,CAACvB,MAAM,CAACqB,GAAG,CAACN,KAAK,CAAEQ,EAAE,CAAC,CAAC,CACpE,MAAO,KAAI,CAACrB,cAAc,CAACa,KAAK,CAAC,CACnC,CACF,CACF,CAEAU,UAAUA,CAAA,CAAG,CACX,GAAI,IAAI,CAACzB,MAAM,CAAE,CACf,IAAI,CAACA,MAAM,CAACyB,UAAU,CAAC,CAAC,CACxB,IAAI,CAACzB,MAAM,CAAG,IAAI,CAClB,IAAI,CAACD,QAAQ,CAAG,IAAI,CACtB,CACF,CAEAe,mBAAmBA,CAAA,CAAG,CACpBY,UAAU,CAAC,IAAM,CACf,GAAI,CAAC,IAAI,CAAC1B,MAAM,EAAI,CAAC,IAAI,CAACA,MAAM,CAAC2B,SAAS,CAAE,CAC1C,IAAI,CAACV,OAAO,CAAC,CAAC,CAChB,CACF,CAAC,CAAE,IAAI,CAAC,CACV,CAEA;AACAA,OAAOA,CAAA,CAAG,CACR,GAAI,CAAC,IAAI,CAACjB,MAAM,CAAE,CAChB,IAAI,CAACC,eAAe,CAAC,CAAC,CACxB,CACF,CAEA2B,cAAcA,CAAA,CAAG,CAEjB,CACF,CAEA;AACA,KAAM,CAAA7B,QAAQ,CAAGA,CAACF,SAAS,CAAEC,MAAM,GAAK,GAAI,CAAAH,YAAY,CAACE,SAAS,CAAEC,MAAM,CAAC,CAE3E,cAAe,CAAAC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}