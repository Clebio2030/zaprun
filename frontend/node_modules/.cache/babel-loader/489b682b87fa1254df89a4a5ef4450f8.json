{"ast":null,"code":"import React,{useState,useEffect}from'react';import{makeStyles}from'@material-ui/core/styles';import TextField from'@material-ui/core/TextField';import Button from'@material-ui/core/Button';import List from'@material-ui/core/List';import ListItem from'@material-ui/core/ListItem';import ListItemText from'@material-ui/core/ListItemText';import ListItemSecondaryAction from'@material-ui/core/ListItemSecondaryAction';import IconButton from'@material-ui/core/IconButton';import DeleteIcon from'@material-ui/icons/Delete';import EditIcon from'@material-ui/icons/Edit';const useStyles=makeStyles(theme=>({root:{display:'flex',flexDirection:'column',alignItems:'center',margin:'2rem'},inputContainer:{display:'flex',width:'100%',marginBottom:'1rem'},input:{flexGrow:1,marginRight:'1rem'},listContainer:{width:'100%',height:'100%',marginTop:'1rem',backgroundColor:theme.palette.background.primary,borderRadius:'5px'},list:{marginBottom:'5px',color:theme.palette.text.primary}}));const ToDoList=()=>{const classes=useStyles();const[task,setTask]=useState('');const[tasks,setTasks]=useState([]);const[editIndex,setEditIndex]=useState(-1);useEffect(()=>{const savedTasks=localStorage.getItem('tasks');if(savedTasks){setTasks(JSON.parse(savedTasks));}},[]);useEffect(()=>{localStorage.setItem('tasks',JSON.stringify(tasks));},[tasks]);const handleTaskChange=event=>{setTask(event.target.value);};const handleAddTask=()=>{if(!task.trim()){// Impede que o usuário crie uma tarefa sem texto\nreturn;}const now=new Date();if(editIndex>=0){// Editar tarefa existente\nconst newTasks=[...tasks];newTasks[editIndex]={text:task,updatedAt:now,createdAt:newTasks[editIndex].createdAt};setTasks(newTasks);setTask('');setEditIndex(-1);}else{// Adicionar nova tarefa\nsetTasks([...tasks,{text:task,createdAt:now,updatedAt:now}]);setTask('');}};const handleEditTask=index=>{setTask(tasks[index].text);setEditIndex(index);};const handleDeleteTask=index=>{const newTasks=[...tasks];newTasks.splice(index,1);setTasks(newTasks);};return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(\"div\",{className:classes.inputContainer},/*#__PURE__*/React.createElement(TextField,{className:classes.input,label:\"Nova tarefa\",value:task,onChange:handleTaskChange,variant:\"outlined\"}),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:handleAddTask},editIndex>=0?'Salvar':'Adicionar')),/*#__PURE__*/React.createElement(\"div\",{className:classes.listContainer},/*#__PURE__*/React.createElement(List,null,tasks.map((task,index)=>/*#__PURE__*/React.createElement(ListItem,{key:index,className:classes.list},/*#__PURE__*/React.createElement(ListItemText,{primary:task.text,secondary:task.updatedAt.toLocaleString()}),/*#__PURE__*/React.createElement(ListItemSecondaryAction,null,/*#__PURE__*/React.createElement(IconButton,{onClick:()=>handleEditTask(index)},/*#__PURE__*/React.createElement(EditIcon,null)),/*#__PURE__*/React.createElement(IconButton,{onClick:()=>handleDeleteTask(index)},/*#__PURE__*/React.createElement(DeleteIcon,null))))))));};export default ToDoList;","map":{"version":3,"names":["React","useState","useEffect","makeStyles","TextField","Button","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","DeleteIcon","EditIcon","useStyles","theme","root","display","flexDirection","alignItems","margin","inputContainer","width","marginBottom","input","flexGrow","marginRight","listContainer","height","marginTop","backgroundColor","palette","background","primary","borderRadius","list","color","text","ToDoList","classes","task","setTask","tasks","setTasks","editIndex","setEditIndex","savedTasks","localStorage","getItem","JSON","parse","setItem","stringify","handleTaskChange","event","target","value","handleAddTask","trim","now","Date","newTasks","updatedAt","createdAt","handleEditTask","index","handleDeleteTask","splice","createElement","className","label","onChange","variant","onClick","map","key","secondary","toLocaleString"],"sources":["C:/ProjectsCode/ZapRun/ZapRun/frontend/src/pages/ToDoList/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    margin: '2rem'\r\n  },\r\n  inputContainer: {\r\n    display: 'flex',\r\n    width: '100%',\r\n    marginBottom: '1rem'\r\n  },\r\n  input: {\r\n    flexGrow: 1,\r\n    marginRight: '1rem'\r\n  },\r\n  listContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n    marginTop: '1rem',\r\n    backgroundColor: theme.palette.background.primary,\r\n    borderRadius: '5px',\r\n  },\r\n  list: {\r\n    marginBottom: '5px',\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\n\r\nconst ToDoList = () => {\r\n  const classes = useStyles();\r\n\r\n  const [task, setTask] = useState('');\r\n  const [tasks, setTasks] = useState([]);\r\n  const [editIndex, setEditIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    const savedTasks = localStorage.getItem('tasks');\r\n    if (savedTasks) {\r\n      setTasks(JSON.parse(savedTasks));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const handleTaskChange = (event) => {\r\n    setTask(event.target.value);\r\n  };\r\n\r\n  const handleAddTask = () => {\r\n    if (!task.trim()) {\r\n      // Impede que o usuário crie uma tarefa sem texto\r\n      return;\r\n    }\r\n\r\n    const now = new Date();\r\n    if (editIndex >= 0) {\r\n      // Editar tarefa existente\r\n      const newTasks = [...tasks];\r\n      newTasks[editIndex] = {text: task, updatedAt: now, createdAt: newTasks[editIndex].createdAt};\r\n      setTasks(newTasks);\r\n      setTask('');\r\n      setEditIndex(-1);\r\n    } else {\r\n      // Adicionar nova tarefa\r\n      setTasks([...tasks, {text: task, createdAt: now, updatedAt: now}]);\r\n      setTask('');\r\n    }\r\n  };\r\n\r\n  const handleEditTask = (index) => {\r\n    setTask(tasks[index].text);\r\n    setEditIndex(index);\r\n  };\r\n\r\n  const handleDeleteTask = (index) => {\r\n    const newTasks = [...tasks];\r\n    newTasks.splice(index, 1);\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.inputContainer}>\r\n        <TextField\r\n          className={classes.input}\r\n          label=\"Nova tarefa\"\r\n          value={task}\r\n          onChange={handleTaskChange}\r\n          variant=\"outlined\"\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleAddTask}>\r\n          {editIndex >= 0 ? 'Salvar' : 'Adicionar'}\r\n        </Button>\r\n      </div>\r\n      <div className={classes.listContainer}>\r\n        <List>\r\n          {tasks.map((task, index) => (\r\n            <ListItem key={index} className={classes.list}>\r\n              <ListItemText primary={task.text} secondary={task.updatedAt.toLocaleString()} />\r\n              <ListItemSecondaryAction>\r\n                <IconButton onClick={() => handleEditTask(index)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n                <IconButton onClick={() => handleDeleteTask(index)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default ToDoList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}